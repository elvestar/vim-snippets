## Main
# main
snippet main
	int main(int argc, const char *argv[])
	{
		${0}
		return 0;
	}
# main(void)
snippet mainn
	int main(void)
	{
		${0}
		return 0;
	}
##
## Preprocessor
# #include <...>
snippet inc
	#include <${1:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif
# define
snippet def
	#define
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
		${0}
	#endif
# header include guard
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${0}

	#endif /* end of include guard: $1 */
##
## Control Statements
# if
snippet if
	if (${1:/* condition */}) {
		${2}
	}
# else
snippet el
	else {
		${1}
	}
# else if
snippet elif
	else if (${1:/* condition */}) {
		${2}
	}
# ifi
snippet ifi
	if (${1:/* condition */}) ${2};
# ternary
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
##
## Loops
# for
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
# for (custom)
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}
# while
snippet wh
	while (${1:/* condition */}) {
		${2}
	}
# do... while
snippet do
	do {
		${2}
	} while (${1:/* condition */});
##
## Functions
# function definition
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
# function declaration
snippet fund
	${1:void} ${2:function_name}(${3});
##
## Types
# typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
# struct
snippet st
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};
# typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};
# typedef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
##
## Input/Output
# printf
snippet pr
	printf("${1:%s}\n"${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
# getopt
snippet getopt
	int choice;
	while (1)
	{
		static struct option long_options[] =
		{
			/* Use flags like so:
			{"verbose",	no_argument,	&verbose_flag, 'V'}*/
			/* Argument styles: no_argument, required_argument, optional_argument */
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		/* Argument parameters:
			no_argument: " "
			required_argument: ":"
			optional_argument: "::" */

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				/* getopt_long will have already printed an error */
				break;

			default:
				/* Not sure how to get here... */
				return EXIT_FAILURE;
		}
	}

	/* Deal with non-option arguments here */
	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}
##
## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
# GPL
snippet gpl
	/*
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation; either version 2 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program; if not, see <http://www.gnu.org/licenses/>.
	 *
	 * Copyright (C) ${1:Author}, `strftime("%Y")`
	 */

	${0}
# #define
snippet df
	#define 
# Namespace 
snippet un
	using namespace ${1};
	${2}
snippet nm
	namespace ${1:} {
	${2}
	}  // namespace $1
	${3}
snippet prf
	printf("${1}", "${2}");
	${3}
snippet ifd
	cout << __FILE__ << ":" << __LINE__ << ":" << ${0} << endl;
snippet ife
	if (${1}) {
	    ${2}
	} else {
	    ${3}
	}   
snippet ff
	#ifndef `GetFullPathForIncludeGuards()`
	#define `GetFullPathForIncludeGuards()`
	#pragma once
	
	${1}
	
	#endif  // `GetFullPathForIncludeGuards()`
snippet ih
	#include "`GetHeaderFile()`"
	${1}
# Namespace of minos master
snippet nmm
	namespace baidu {
	namespace minos {
	namespace master {

	${1}

	}  // namespace master
	}  // namespace minos
	}  // namespace baidu
# Include of minos master
snippet imm
	#include "minos/master/${1}"
	${2}
# * Write a class
# Constructor
snippet ct
	`GetLastClassName()`();
# Destructor
snippet dt
	~`GetLastClassName()`();
snippet ini
	bool Init();
snippet mini
	bool m_is_inited;
# * Write a function
# return
snippet re
	return ${1};
# return true;
snippet ret
	return true;
# return false;
snippet ref
	return false;
# return NULL
snippet ren
	return NULL;
# include <> and its using
snippet ii
	#include <${1}>
	${2}
snippet us
	using 
snippet iis
	#include <string>
	${1}
snippet iiv
	#include <vector>
	${1}
snippet iim
	#include <map>
	${1}
snippet iia
	#include <algorithm>
	${1}
snippet usv
	using std::vector;
	${1}
snippet usm
	using std::map;
	${1}
snippet uss
	using std::string;
	${1}
# include "" and its using
snippet ic
	#include "${1}"
	${2}
snippet it
	#include "thirdparty/${1}"
	${2}
snippet igl
	#include "thirdparty/glog/logging.h"
	${1}
snippet igf
	#include "thirdparty/gflags/gflags.h"
	${1}
snippet igt
	#include "thirdparty/gtest/gtest.h"
	${1}
snippet igtp
	#include "thirdparty/gtest/gtest_prod.h"
	${1}
snippet igm
	#include "thirdparty/gmock/gmock.h"
	${1}
snippet itsn
	#include "toft/base/string/number.h"
	${1}
snippet itsf
	#include "toft/base/string/format.h"
	${1}
snippet itsa
	#include "toft/base/string/algorithm.h"
	${1}
snippet utsnn
	using toft::NumberToString;
	${1}
snippet utsfs
	using toft::StringPrint;
	${1}
snippet utsaj
	using toft::JoinStrings;
	${1}
# *Use stl
# Define stl container
snippet dcs
	const std::string& ${1}
snippet dcv
	const std::vector<${1}> ${2}
snippet dcm
	const std::map<${1}, ${2}> ${3}
# Define stl container pointer
snippet dps
	const std::string* ${1}
snippet dpv
	const std::vector<${1}>* ${2}
snippet dpm
	const std::map<${1}, ${2}>* ${3}
# Logging (using glog)
snippet inf
	LOG(INFO) << "${1}"${2};
snippet war
	LOG(WARNING) << "${1}"${2};
snippet err
	LOG(ERROR) << "${1}"${2};
snippet fat
	LOG(FATAL) << "${1}"${2};
snippet v1
	VLOG(10) << "${1}"${2};
snippet v2
	VLOG(20) << "${1}"${2};
snippet v3
	VLOG(30) << "${1}"${2};
snippet v4
	VLOG(40) << "${1}"${2};
# Check (using glog)
snippet C
	CHECK(${1});
	${2}
snippet CE
	CHECK_EQ(${1});
	${2}
snippet CN
	CHECK_NE(${1});
	${2}
snippet CNN
	CHECK_NOTNULL(${1});
	${2}
# Unittest (using gtest)
snippet ut
	class ${1}Test : public ::testing::Test {
	protected:
	    virtual void SetUp() {
		}
		virtual void TearDown() {
		}

		${2}
	}; 
snippet tf
	TEST_F(`GetLastClassName()`, ${1}) {
		${2}
	};
snippet FR
	FRIEND_TEST(${1}, ${2});
snippet A
	ASSERT_${1}(${2});
	${3}
snippet AT
	ASSERT_TRUE(${1});
	${3}
snippet AF
	ASSERT_FALSE(${1});
	${3}
snippet AE
	ASSERT_EQ(${1}, ${2});
	${3}
snippet AN
	ASSERT_NE(${1}, ${2});
	${3}
snippet AD
	ASSERT_DEATH(${1}, "${2}");
	${3}
snippet E
	EXPECT_${1}(${2});
	${3}
snippet ET
	EXPECT_TRUE(${1});
	${3}
snippet EF
	EXPECT_FALSE(${1});
	${3}
snippet EE
	EXPECT_EQ(${1}, ${2});
	${3}
snippet EN
	EXPECT_NE(${1}, ${2});
	${3}
snippet ED
	EXPECT_DEATH(${1}, "${2}");
	${3}
# Gflags
snippet F
	FLAGS_
snippet DF
	DEFINE_
snippet DFb
	DEFINE_bool(${1}, ${2}, "${3}");
snippet DFs
	DEFINE_string(${1}, "${2}", "${3}");
snippet DFi
	DEFINE_int32(${1}, ${2}, "${3}");
snippet DFi3
	DEFINE_int32(${1}, ${2}, "${3}");
snippet DFi6
	DEFINE_int64(${1}, ${2}, "${3}");
snippet DC
	DECLARE_
snippet DCb
	DECLARE_bool(${1});
snippet DCs
	DECLARE_string(${1});
snippet DCi
	DECLARE_int32(${1});
snippet DCi3
	DECLARE_int32(${1});
snippet DCi6
	DECLARE_int64(${1});
# *Build
# See in blade.snippets
